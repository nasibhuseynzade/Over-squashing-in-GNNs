# INPUT:
- Graph G(V,E)
- Number of iterations (loops)
- remove_edges flag
- removal_bound for curvature
- tau for edge selection randomness
- commute_threshold for acceptable commute time changes

# INITIALIZATION:
1. Create adjacency matrix A from G
2. Initialize curvature matrix C
3. Calculate initial_commute_time = commute_time(G)
4. Set current_commute_time = initial_commute_time

# MAIN LOOP: For each iteration i in loops:
    ## EDGE ADDITION PHASE:
    1. Calculate balanced Forman curvature for all node pairs
        - Store results in matrix C
    
    2. Find node pair (x,y) with minimum curvature
        - x,y = argmin(C)
    
    3. Generate candidate edges:
        - Get neighbors of x: x_neighbors
        - Get neighbors of y: y_neighbors
        - candidates = []
        - For each i in x_neighbors:
            For each j in y_neighbors:
                If (i,j) not in E and iâ‰ j:
                    Add (i,j) to candidates
    
    4. If candidates exist:
        a. Calculate curvature improvements for all candidates
        b. Select top K candidates based on curvature improvement
        c. For each of top K candidates:
            - Temporarily add edge to G
            - Calculate new commute time
            - Remove temporary edge
            - Track best edge that improves commute time
        d. If best edge found:
            - Add edge to G permanently
            - Update adjacency matrix A
            - Update current_commute_time
        e. Else:
            - Set can_add = False
    
    ## EDGE REMOVAL PHASE:
    If remove_edges is True:
        1. Find edge (x,y) with maximum curvature
        2. If curvature > removal_bound:
            a. Temporarily remove edge
            b. Calculate new commute time
            c. If (new_commute_time - current_commute_time) < commute_threshold:
                - Remove edge permanently
                - Update adjacency matrix A
                - Update current_commute_time
            d. Else:
                - Restore edge
    
    ## TERMINATION CHECK:
    If can_add is False and (not remove_edges or no valid removals):
        Break loop

# OUTPUT:
- Return modified graph edge indices
- Return edge types

# KEY PRINCIPLES:
1. Two-Stage Edge Selection:
   - First stage: Curvature-based candidate selection
   - Second stage: Commute time validation

2. Conservative Edge Removal:
   - Must satisfy both curvature and commute time criteria

3. Balance Between:
   - Graph structure (via curvature)
   - Performance metrics (via commute time)
   - Computational efficiency (via candidate filtering)